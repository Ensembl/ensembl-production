includeConfig './base.config'

//Minimum required nextflow version 
nextflowVersion = '!>=23.10.0'

//nf-schema plugin 
plugins {
  id 'nf-schema@2.2.0'
}

// Setup Default help message for all the production pipelines  
validation {
  help {
    enabled : true
  }
}

//global setting
workDir = "$NOBACKUP_DIR/nextflow/work/release_$ENS_VERSION/"
nextflow.enable.dsl=2
publishDir   = "$NOBACKUP_DIR/nextflow/outputs/$USER/"
params.pipeline_dir = "$BASE_DIR/$USER/ensembl-hive/scripts/"
params.help = false
params.config = ''

// workflow complete status 
workflow.onComplete {
    def msg = """
      Pipeline execution summary
      ---------------------------
      Completed at: ${workflow.complete}
      Duration    : ${workflow.duration}
      Success     : ${workflow.success}
      workDir     : ${workflow.workDir}
      exit status : ${workflow.exitStatus}
      """
      .stripIndent()   

  println msg
  println "Execution status: ${workflow.success ? 'OK' : 'failed'}"
  System.exit(workflow.success ? 0 : 1)
}

// default params
params {
    species           = "''"
    division          = "''"
    antispecies       = "''"
    run_all           = 1
    meta_filters      = "''"
    dbname            = "''"
    group             = 'core'
    pipeline_dir      = "$BASE_DIR/ensembl-hive/scripts/"
    help              = false
    release           = "$ENS_VERSION"
    output            = "$NOBACKUP_DIR/nextflow/work/release_$ENS_VERSION"
    nf_py_script_path = "$BASE_DIR/ensembl-production/nextflow/nf-py-scripts/"
}

profiles {
  slurm {
    process {
      withLabel: 'default_retry' {
          cpus = { 2 * task.attempt }
          time = { 1.hour * task.attempt }
          memory = { 1.GB * Math.pow(2, (task.attempt - 1)) }
          errorStrategy = { task.exitStatus in [104, 137, 140, 143] ? 'retry' : 'finish' }
          maxRetries = 3
      }
      withLabel: mem2GB_H {
        memory = 2.GB
        time = '1h'

      }
      withLabel: mem2GB_D {
        memory = 2.GB
        time = '1d'
      }
      withLabel: mem2GB_W {
        memory = 2.GB
        time = '7d'
      }
      withLabel: mem4GB_H {
        memory = 4.GB
        time = '1h'
      }
      withLabel: mem4GB_D {
        memory = 4.GB
        time = '1d'
      }
      withLabel: mem4GB_W {
        memory = 4.GB
        time = '7d'
      }
      withLabel: mem8GB_H {
        memory = 8.GB
        time = '1h'
      }
      withLabel: mem8GB_D {
        memory = 8.GB
        time = '1d'
      }
      withLabel: mem8GB_W {
        memory = 8.GB
        time = '7d'
      }
      withLabel: mem16GB_H {
        memory = 16.GB
        time = '1h'
      }
      withLabel: mem16GB_D {
        memory = 16.GB
        time = '1d'
      }
      withLabel: mem16GB_W {
        memory = 16.GB
        time = '7d'
      }
      withLabel: mem32GB_H {
        memory = 32.GB
        time = '1h'
      }
      withLabel: mem32GB_D {
        memory = 32.GB
        time = '1d'
      }
      withLabel: mem32GB_W {
        memory = 32.GB
        time = '7d'
      }
      withLabel: mem64GB_H {
        memory = 64.GB
        time = '1h'
      }
      withLabel: mem64GB_D {
        memory = 64.GB
        time = '1d'
      }
      withLabel: mem64GB_W {
        memory = 64.GB
        time = '7d'
      }
      withLabel: mem128GB_H {
        memory = 128.GB
        time = '1h'
      }
      withLabel: mem128GB_D {
        memory = 128.GB
        time = '1d'
      }
      withLabel: mem128GB_W {
        memory = 128.GB
        time = '7d'
      }
      withLabel: mem256GB_H {
        memory = 256.GB
        time = '1h'
      }
      withLabel: mem256GB_D {
        memory = 256.GB
        time = '1d'
      }
      withLabel: mem256GB_W {
        memory = 256.GB
        time = '7d'
      }
    } 
  }
}
